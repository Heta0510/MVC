HTML helpers-
1)HTML helpers are methods
2)This returns HTML strings
3)These are used on View
4)In simple terms these are C# methods which are used to return HTML
5)Using HTML helpers you can render a text box, an area, image tag etc.
6)MVC has built in HTML helpers
7)We can create custom helpers also 
8)Using HTML helpers a view can show model properties and can generate html as per THE TYPE OF PROPERTIES.

Types of HTML helpers-
1)Inline HTML helpers
2)Built-in HTML helpers
  1)Standard HTML helpers
  2)Strongly Types HTML helpers
  3)Templated HTML helpers
3)Customer HTML helpers


1)Inline HTML helpers
-- These are created on single view and are used on same page.
-- Inline helpers can be created using @helper tag

@helper HelperName(parameter)
{
//code
}

@HelperName(parameters)


<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <div>
        @helper MyListHelper(string[] str)
        {
            if (str.Length == 0)
            {
                <label>No data exist</label>
            }
            else
            {
                <ul>
                    @foreach (var item in str)
                    {
                        <li>@item</li>
                    }
                </ul>
            }

        }
    </div>
    <div>
        <label>Example 1 - Name List</label>
        <div>
            @MyListHelper(new string[] { "Tom", "Harry", "John", "Mark" })
        </div>
    </div>

    <div>
        <label>Example 2 - Empty List</label>
        <div>
            @MyListHelper(new string[] {  })
        </div>
    </div>
</body>
</html>

Use case-
1)When you have something common for a single view
2)Best way to avoid code duplicacy in single View
3)Dont use for common part for different view


2.1)Standard HTML helpers-
1)These are already created by ASP.NET MVC
2)These methods have multiple overrides so that we can use as per our requirement.

Standard HTML helpers-
1)@Html.ActionLink() - Used to create link on HTML Page.
2)@Html.TextBox() - Used to create text box.
3)@Html.CheckBox() - used to create Check Box.
4)@Html.RadioButton() - Used to create RadioButton.
5)@Html.BeginForm() - used to start form.
6)@Html.EndForm() - used to end a form.
7)@Html.DropDownList() - used to create dropdown List.
8)@Html.Hidden() - used to create Hidden Fields.


@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <div> 
        @Html.ActionLink("Click me", "Index", new { name = "Heta"})
    </div>
    <br/>
    @{ 
        string name = "Heta1";
    }
    @Html.TextBox("txtBox1", name, new { id = "CustId",@class= "myCustomClass",style="width:200px"})

    <br/>
    <br/>
    @Html.CheckBox("chkBox1", true,new { })

    <br/>
    <br/>
    @Html.Password("myPassword")
</body>
</html>

 public ActionResult About(string name = null)
        {
            return View();
        }

2.2)Strongly Type HTML helpers:
How To use?
It uses lambda expressions
@Html.TextBoxFor(model=>model.property)

@using StronglyTypedhelpers.Models
@model Employee


<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <div> 
        @using (Html.BeginForm("myForm"))
        {
        @Html.TextBoxFor(x => x.Name) 
        <br/>
        <br/>
        @Html.TextBoxFor(x => x.Address)
        <br/>
        <br/>
        @Html.CheckBoxFor(x => x.IsEmployee)
            <br/>
            <br/>
        <input type="submit" value="Press me"/>
        }
    </div>
</body>
</html>

Employee.cs(Model)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;



namespace StronglyTypedhelpers.Models
{
    public class Employee
    {
        public string Name { get; set; }
        public string Address { get; set; }
        public bool IsEmployee { get; set; }
    }
}

HomeControllers.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using StronglyTypedhelpers.Models;

namespace StronglyTypedhelpers.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public ActionResult Index()
        {
            Employee emp = new Employee()
            {
                Address = "This is my Address",
                IsEmployee = true,
                Name="Heta"
            };
            return View(emp);
        }

        [HttpPost]
        public ActionResult Index(Employee emp)
        {
            return View();
        }
    }
}

2.3)Templated HTML helpers
1)Used for data display and input
2)It generate HTML automatically as per model property
  Means
  1)Calendar from date
  2)Number from int
  3)Checkbox from bool etc
3)Can generate HTML for complete model with a single tag

Types of Templated HTML helpers
1)Display
  1)@Html.Display()
  2)@Html.DisplayFor()
  3)@Html.DisplayName()
  4)@Html.DisplayNameFor()
  5)@Html.DisplayText()
  6)@Html.DisplayTextFor()
  7)@Html.DisplayForModel()
2)Edit/Input
  1)@Html.Editor
  2)@Html.EditorFor()
  3)@Html.EditorForModel()

1)Display
  1)@Html.DisplayName() --> Used to display only the name of model property.
  2)@Html.DisplayNameFor() --> Strongly binding version of last helper.
  3)@Html.DisplayText() --> Used to display only the value of model property.
  4)@Html.DisplayTextFor() --> Stongly binding version of last helper.
  5)@Html.Display() --> Used to display value with some extra functionality.
  6)@Html.DisplayFor() --> Strongly binding version of last helper.
  7)@Html.DisplayForModel() --> Used to display complete model data.

HomeController
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using TemplatedHtmlHelper.Models;

namespace TemplatedHtmlHelper.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public ActionResult Index()
        {
            Employee emp = new Employee()
            {
                Id = 1,
                Name = "Heta Patel",
                Email = "heta@gmail.com",
                DateOfBirth = DateTime.Now,
                IsOnline = true
            };
            return View(emp);
        }
    }
}
Employee.cs(Model)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.ComponentModel.DataAnnotations;

namespace TemplatedHtmlHelper.Models
{
    public class Employee
    {
        public int Id { get; set; }

        [Display(Name="Please enter your name")]
        public string Name { get; set; }
        public string Email { get; set; }
        public bool IsOnline { get; set; }

        [Display(Name = "Date Of Birth")]
        public DateTime DateOfBirth { get; set; }
    }
}
Index.Html(View)
@using TemplatedHtmlHelper.Models
@model Employee

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <div> 
        @Html.DisplayName("Name")
        <br/>
        <br/>
        @Html.DisplayNameFor(x=>x.DateOfBirth)

        <br/>
        <br/>
<hr/>
        @Html.DisplayText("Name")
        <br />
        <br />
        @Html.DisplayTextFor(x=>x.DateOfBirth)
        <br />
        <br />
        <hr />
        @Html.Display("Name")
        <br />
        <br />
        @Html.DisplayFor(x=>x.Email)
        <hr />
        <hr />
        @Html.DisplayForModel()
    </div>
</body>
</html>

2)Edit/input
  1)@Html.Editor() --> Used to create input field using the single model property
  2)@Html.EditorFor() --> Strongly binding version of LastHelper
  3)@Html.EditorForModel() --> Used to create input field for entire model

HomeConteroller
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using TemplatedHtmlHelper.Models;

namespace TemplatedHtmlHelper.Controllers
{
    public class HomeController : Controller
    {
        // GET: Home
        public ActionResult Index()
        {
            Employee emp = new Employee()
            {
                Id = 1,
                Name = "Heta Patel",
                Email = "heta@gmail.com",
                DateOfBirth = DateTime.Now,
                IsOnline = true
            };
            return View(emp);
        }
        public ActionResult Edit()
        {
            return View();
        }
    }
}
Employee.cs(Model)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.ComponentModel.DataAnnotations;

namespace TemplatedHtmlHelper.Models
{
    public class Employee
    {
        public int Id { get; set; }

        [Display(Name="Please enter your name")]
        public string Name { get; set; }
        public string Email { get; set; }
        public bool IsOnline { get; set; }

        [Display(Name = "Date Of Birth")]
        [DataType(DataType.Date)]
        public DateTime DateOfBirth { get; set; }
    }
}
Edit.csHtml(View)
@model TemplatedHtmlHelper.Models.Employee
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Edit</title>
</head>
<body>
    <div> 
        @Html.DisplayName("id") - @Html.Editor("Id")
        <br />
        <br />
        @Html.DisplayNameFor(x=>x.Name) - @Html.EditorFor(x=>x.Name)
        <br />
        <br />
        @Html.DisplayNameFor(x=>x.DateOfBirth) - @Html.EditorFor(x=>x.DateOfBirth)
        <hr />
        <hr />
        @Html.EditorForModel()
    </div>
    
</body>
</html>

